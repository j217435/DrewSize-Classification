# -*- coding: utf-8 -*-
"""RF_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dlpXB10lka7AwjpY_Z9h8_Wg-KId2jT7
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2
import os
import pickle
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
import glob
import matplotlib.pyplot as plt
from PIL import Image
from skimage.io import imread
from sklearn.metrics import confusion_matrix, precision_recall_fscore_support 
import pickle

img_list = []
labels = []

class_dict ={
    '20x26':0.0,
    '20x28':1.0,
    '28x22':2.0,
    '35x19':3.0,
    '35x22':4.0,
    '35x28':5.0,
    '35x30':6.0,
    '42x22':7.0,
    '42x30':8.0
}

image_list =[]
class_num = []
for name in glob.glob(r'/content/drive/MyDrive/Neocis_Ass/Img_SOBEL/*'):
  for root, dirs, files in os.walk(name):
    for file in files:
      img_path = os.path.join(root,file)
      image_list.append(imread(img_path).flatten())
      class_num.append(class_dict[f'{os.path.split(root)[-1]}'])



class_label = LabelEncoder().fit_transform(class_num)

df = pd.DataFrame({
    'img':image_list,
    'class':class_num
})

img_data = np.vstack(df['img'])

train_idx, val_idx = train_test_split(range(len(class_label)), test_size=0.2, stratify=class_label, random_state=1234)

train_label, val_label = class_label[train_idx],class_label[val_idx]
train_img, val_img = img_data[train_idx], img_data[val_idx]

val_img.shape

model = RandomForestClassifier(n_estimators=10, max_depth=3, random_state=1234)
model.fit(train_img, train_label)

os.chdir(r'/content/drive/MyDrive/Neocis_Ass/RF_Checkpoint')
with open('model_rf1.pkl','rb') as fr:
	model_v1 = pickle.load(fr)

model_v1

class_dict ={
    '20x26':0,
    '20x28':1,
    '28x22':2,
    '35x19':3,
    '35x22':4,
    '35x28':5,
    '35x30':6,
    '42x22':7,
    '42x30':8
}
new_dict = {v : k for k, v in class_dict.items()}

new_dict[0]

file_name_list =[]
class_list= []
count = 0
# for name in glob.glob(r'/content/drive/MyDrive/Neocis_Ass/Img_SOBEL/20x26/*'):
for root, dirs, files in os.walk(r'/content/drive/MyDrive/Neocis_Ass/Img_SOBEL/20x26'):
  for file in files:
    count+=1
    if count == 10:
      break
    img_path = os.path.join(root,file)
    img = cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)
    output = cv2.Sobel(img,-1,1,3,3,7)
    img = output.flatten()
    pred = model.predict(img.reshape(-1,1228800))[0]
    pred = new_dict[pred]
    file_name_list.append(file)
    class_list.append(pred)
    print(f'================{count}================')
    print(f'file_name: {file}','---->', f'Class: {pred}')
    print('=====================================')
df = pd.DataFrame({    
    'class':class_list,
    'filename':file_name_list
})

print(df.sort_values(by=['class']))

for name in glob.glob(r'/content/drive/MyDrive/Neocis_Ass/Img_SOBEL/*'):
  print(name)
  count =0
  for root, dirs, files in os.walk(name):
    for file in files:
      # if count ==10:
      #   break
      # img_path = os.path.join(root,file)
      # img = cv2.imread(img_path,cv2.IMREAD_GRAYSCALE)
      # output = cv2.Sobel(img,-1,1,3,3,7)
      # print(output)
      # output = imread(output).flatten()
      # pred = model.predict(output.reshape(-1,1228800))
      # pred = new_dict[f'{pred[0]}']
      # file_name_list.append(file)
      # class_list.append(pred)
      # print(f'================{count}================')
      # print(f'file_name: {file}','---->', f'Class: {pred}')

print('val_set: ',model_v1['model'].score(val_img,val_label))

model = model_v1['model']

img = imread(r'/content/drive/MyDrive/Neocis_Ass/Img_SOBEL/35x30/10.png').flatten()
y = model.predict(img.reshape(-1,1228800))
y[0]

output_dir = r'/content/drive/MyDrive/Neocis_Ass/RF_Checkpoint'
def save_model(model, label_encoder, output_file):
    try:
        with open(output_file, 'wb') as outfile:
            pickle.dump({
                'model': model,
                'label_encoder': label_encoder
            }, outfile)
        return True
    except:
        return False

save_model(model, class_label, os.path.join(output_dir, 'model_rf2.pkl'))

label_pred = model.predict(val_img)
labels=[0,1,2,3,4,5,6,7,8]
p, r, f1, s = precision_recall_fscore_support(val_label, label_pred,labels=[0,1,2,3,4,5,6,7,8],average =None)
res1 = pd.DataFrame({
    'Label': labels,
    'Precision': p,
    'Recall': r,
    'F1': f1,
    'Support': s
})
res1